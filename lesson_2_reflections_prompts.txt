What happens when you initialize a repository? Why do you need to do it?

	When we initialize a repository, some meta data with the name ".git" is created
	in the directory we initialized the repository to store and track the history of our repository.
	We get the messages about initializing the repository but the files in the directory are not
	tracked by git yet. We can add them to the repository. We need to do this in order to create and
	initialize a repository so that we can track the history of our projects and create commits.

How is staging area different from the working directory and the repository? What value do you think it offers?

	Working directory is the directory we are currently working on, where we might have created the repository.
	Repository stores all of our commits for the projects, contains all the files of our project and keeps track
	of all the files we want to keep track of. Staging area contains the files which we want to track and commit.
	When we create a commit, a snapshot of only those files which are in the staging area is taken and stored in the
	repository. This allows us to only keep track of the files we want to track because we might not want to track
	all the files in the repository, and we get more control about the commits we want to make and the files we want to track.

How can you use the staging area to make sure you have one commit per logical change?

	The staging area can be used to make sure that we have one commit per logical change by comparing it
	to the working directory and the most recent commit whenever needed. We can compare it to the working
	directory after making a change to make sure we stage every logical change correctly using "git diff"
	and compare the staging area to the most recent commit before commiting to make sure that the changes
	we are commiting are correct and one logical change using "git diff --staged".

What are some situations when branches would be helpful in keeping your history organised? How would branches help?

	Branches would be heplful in kepping history organised when we might need to make alternate versions of our project or add
	experimental features. Branches would help by keeping the original version uneffected and keeping the histories of the different
	versions seperately stored. This would organise the histories of different versions seperately and make it a lot easier to checkout
	different commits of the projects. This would also allow us to keep the changes we want in the final project by merging the branches needed.

How do the diagrams help you visualize the branch structure?

	Diagrams help to visualize the branch structure by visualizing the commit histories
	in each branch. The commit histories in each branch are listed chronologically and help
	to visualize the branch structure as it can be seen when and where each commit is made.
	This helps to visualize how the commits are made and the branch structure.